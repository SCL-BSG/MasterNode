Copyright (c) 2009-2012 Bitcoin Developers
Copyright (C) 2018-2023 Bank Software Gold Developers
Distributed under the MIT/X11 software license, see the accompanying
file license.txt or http://www.opensource.org/licenses/mit-license.php.
This product includes software developed by the OpenSSL Project for use in
the OpenSSL Toolkit (http://www.openssl.org/).  This product includes
cryptographic software written by Eric Young (eay@cryptsoft.com) and UPnP
software written by Thomas Bernard.


UNIX BUILD NOTES
================
Currently builds as is in Ubuntu 18.04 LTS (openssl 1.0.1, boost 55/57)
THis file has been updated for Ubuntu 20.04 LTS, with comments 
set as appropriate. (openssl 1.1.1f, boost 71)


Dependencies
------------

 Library     Purpose           Description
 -------     -------           -----------
 libssl      SSL Support       Secure communications
 libdb       Berkeley DB       Blockchain & wallet storage
 libboost    Boost             C++ Library
 miniupnpc   UPnP Support      Optional firewall-jumping support
 libqrencode QRCode generation Optional QRCode generation

Note that libexecinfo should be installed, if you building under *BSD systems. 
This library provides backtrace facility.

miniupnpc may be used for UPnP port mapping.  It can be downloaded from
http://miniupnp.tuxfamily.org/files/.  UPnP support is compiled in and
turned off by default.  Set USE_UPNP to a different value to control this:
 USE_UPNP=-    No UPnP support - miniupnp not required
 USE_UPNP=0    (the default) UPnP support turned off by default at runtime
 USE_UPNP=1    UPnP support turned on by default at runtime

libqrencode may be used for QRCode image generation. It can be downloaded
from http://fukuchi.org/works/qrencode/index.html.en, or installed via
your package manager. Set USE_QRCODE to control this:
 USE_QRCODE=0   (the default) No QRCode support - libqrcode not required
 USE_QRCODE=1   QRCode support enabled

Licenses of statically linked libraries:
 Berkeley DB   New BSD license with additional requirement that linked
               software must be free open source
 Boost         MIT-like license
 miniupnpc     New (3-clause) BSD license

Versions used in this release:
 GCC           4.9.0
 OpenSSL       1.0.1g
 Berkeley DB   5.3.28.NC
 Boost         1.71.0
 miniupnpc     1.9.20140401

Dependency Build Instructions: Ubuntu & Debian
# -----------------------------------------------------
# -- RGP All of these dependencies MUST be installed --
#------------------------------------------------------
----------------------------------------------
sudo apt-get install build-essential
sudo apt-get install libssl-dev
sudo apt-get install libdb++-dev
sudo apt-get install libdb-dev
sudo apt-get install libboost-all-dev
sudo apt-get install libqrencode-dev
sudo apt-get install libgmp3-dev
sudo apt-get install miniupnpc
sudo apt-get install libminiupnpc-dev
sudo apt-get install libcurl4-openssl-dev
sudo apt-get install autoconf
sudo apt-get install libtool m4 automake
sudo apt install gcc
sudo apt install g++
sudo apt install zlib1g
sudo apt install zlib1g-dev

If using Boost 1.37, append -mt to the boost libraries in the makefile.


=======================================================
== OpenSLL Ubuntu 18.04 and Ubuntu 20.04
=======================================================

 //sudo mkdir /opt/openssl

== Determine the system openssl version, we need 1.0.1g  
openssl version


OpenSSL instructions for Ubuntu 18.01 and 20.04
============================================================
Ubuntu 20.04 openssl 1.1.1f already installed : no need to uninstall

# -- RGP, the openssl of the Ubuntu release affects the dependencies to
# --      be used, download the same version as installed in the Ubuntu build.
# --      If Ubuntu 18.04 there be an older version of OpenSSL installed, 
# --      please look at the file 'openssl-updateing-linux.txt' in doc folder

# ----------------------------------------------------------------------------------------
# -- update Bank-Society-Gold/src/makefile.unix as followd with your directory settings --
# ----------------------------------------------------------------------------------------

OPENSSL_INCLUDE_PATH = ../../depend/openssl-1.0.1g/include
OPENSSL_INCLUDE_PATH += ../../depend/openssl-1.0.1g/crypto/bn
OPENSSL_INCLUDE_PATH += ../../depend/openssl-1.0.1g/crypto/ec
OPENSSL_INCLUDE_PATH += ../../depend/openssl-1.0.1g/crypto/evp
OPENSSL_INCLUDE_PATH += ../../depend/openssl-1.0.1g/crypto/hma
OPENSSL_LIB_PATH= ../../depend/openssl-1.0.1g/


Dependency Build Instructions: Gentoo
-------------------------------------

emerge -av1 --noreplace boost openssl sys-libs/db

Take the following steps to build (no UPnP support):
 cd ${Society_DIR}/src
 make -f makefile.unix USE_UPNP=
 strip societyd


Notes
-----
The release is built with G++ and then "strip societyd" to strip the debug
symbols, which reduces the executable size by about 90%.


miniupnpc
---------
tar -xzvf miniupnpc-1.6.tar.gz
cd miniupnpc-1.6
make
sudo su
make install


Berkeley DB
-----------
It is recommended to use Berkeley DB 4.8. If you have to build it yourself:

This information is important for the Leveldb folder to be build in BSGOLD
==========================================================================
cd to src folder
BSGOLD_ROOT=$(pwd)

# Pick some path to install BDB to, here we create a directory within the bitcoin directory
BDB_PREFIX="${BSGOLD_ROOT}/leveldb"
mkdir -p $BDB_PREFIX

# Fetch the source and verify that it is not tampered with
wget 'http://download.oracle.com/berkeley-db/db-4.8.30.NC.tar.gz'
echo '12edc0df75bf9abd7f82f821795bcee50f42cb2e5f76a6a281b85732798364ef  db-4.8.30.NC.tar.gz' | sha256sum -c
# -> db-4.8.30.NC.tar.gz: OK
tar -xzvf db-4.8.30.NC.tar.gz

# Build the library and install to our prefix
cd db-4.8.30.NC/build_unix/
#  Note: Do a static build so that it can be embedded into the executable, instead of having to find a .so at runtime
../dist/configure --enable-cxx --disable-shared --with-pic --prefix=$BDB_PREFIX
make install

# Configure Bitcoin Core to use our own-built instance of BDB
cd $BSGOLD_ROOT
./autogen.sh
./configure LDFLAGS="-L${BDB_PREFIX}/lib/" CPPFLAGS="-I${BDB_PREFIX}/include/" # (other args...)
```


Boost
-----
If you need to build Boost yourself:
sudo ./bootstrap.sh
sudo ./b2 install

LevelDB
--------------
make clean
make libleveldb.a libmemenv.a

secp256k1 Build
=============================
./autogen.sh
./configure
make
# run ./tests to ensure everything built and runs
./tests

# -------------------------------------------------------------------------------------
# -- RGP, ONLY run this if you wish to install this into the OS, it is NOT necessary --
# -------------------------------------------------------------------------------------
sudo make install (optional)


To Build (societyd) Headless daemon
--------

cd src/
make -f makefile.unix

See readme-qt.rst for instructions on building Society QT,
the graphical Society.


Security
--------
To help make your Society installation more secure by making certain attacks impossible to
exploit even if a vulnerability is found, you can take the following measures:

* Position Independent Executable
    Build position independent code to take advantage of Address Space Layout Randomization
    offered by some kernels. An attacker who is able to cause execution of code at an arbitrary
    memory location is thwarted if he doesn't know where anything useful is located.
    The stack and heap are randomly located by default but this allows the code section to be
    randomly located as well.

    On an Amd64 processor where a library was not compiled with -fPIC, this will cause an error
    such as: "relocation R_X86_64_32 against `......' can not be used when making a shared object;"

    To build with PIE, use:
    make -f makefile.unix ... -e PIE=1

    To test that you have built PIE executable, install scanelf, part of paxutils, and use:
    scanelf -e ./society

    The output should contain:
     TYPE
    ET_DYN

* Non-executable Stack
    If the stack is executable then trivial stack based buffer overflow exploits are possible if
    vulnerable buffers are found. By default, Society should be built with a non-executable stack
    but if one of the libraries it uses asks for an executable stack or someone makes a mistake
    and uses a compiler extension which requires an executable stack, it will silently build an
    executable without the non-executable stack protection.

    To verify that the stack is non-executable after compiling use:
    scanelf -e ./society

    the output should contain:
    STK/REL/PTL
    RW- R-- RW-

    The STK RW- means that the stack is readable and writeable but not executable.
